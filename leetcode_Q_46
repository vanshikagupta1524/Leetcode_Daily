Given an array nums of distinct integers, return all the possible 
permutations
. You can return the answer in any order.
#include <vector>
using namespace std;

class Solution {
public:
    void permutation(vector<vector<int>> &ans, vector<int> &nums, vector<int> &ds, vector<int> &freq) {
        if (ds.size() == nums.size()) {
            ans.push_back(ds);
            return;
        }
        for (int i = 0; i < nums.size(); i++) {
            if (freq[i] == 0) { // Check if the number is already used
                freq[i] = 1;   // Mark the number as used
                ds.push_back(nums[i]); // Add the number to the current permutation
                permutation(ans, nums, ds, freq); // Recurse
                freq[i] = 0; // Backtrack: mark the number as unused
                ds.pop_back(); // Remove the last number from the current permutation
            }
        }
    }

    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans; // To store all permutations
        vector<int> ds;          // To store the current permutation
        int n = nums.size();
        vector<int> freq(n, 0); // Initialize frequency vector with 0s

        permutation(ans, nums, ds, freq); // Start generating permutations
        return ans; // Return the list of permutations
    }
};
